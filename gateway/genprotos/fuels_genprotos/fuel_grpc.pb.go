// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: protos/fuels_protos/fuel.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FuelService_CreateFuel_FullMethodName               = "/FuelService/CreateFuel"
	FuelService_GetFuel_FullMethodName                  = "/FuelService/GetFuel"
	FuelService_UpdateFuel_FullMethodName               = "/FuelService/UpdateFuel"
	FuelService_DeleteFuel_FullMethodName               = "/FuelService/DeleteFuel"
	FuelService_GetFuelByChoice_FullMethodName          = "/FuelService/GetFuelByChoice"
	FuelService_GetFuels_FullMethodName                 = "/FuelService/GetFuels"
	FuelService_CreateFuelHistory_FullMethodName        = "/FuelService/CreateFuelHistory"
	FuelService_GetFuelHistoriesByID_FullMethodName     = "/FuelService/GetFuelHistoriesByID"
	FuelService_GetFuelHistoriesByChoice_FullMethodName = "/FuelService/GetFuelHistoriesByChoice"
	FuelService_GetFuelHistoriesByDate_FullMethodName   = "/FuelService/GetFuelHistoriesByDate"
	FuelService_GetFuelHistories_FullMethodName         = "/FuelService/GetFuelHistories"
)

// FuelServiceClient is the client API for FuelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuelServiceClient interface {
	// fuel_management
	CreateFuel(ctx context.Context, in *CreateFuelRequest, opts ...grpc.CallOption) (*FuelResponse, error)
	GetFuel(ctx context.Context, in *GetFuelRequest, opts ...grpc.CallOption) (*FuelResponse, error)
	UpdateFuel(ctx context.Context, in *UpdateFuelRequest, opts ...grpc.CallOption) (*FuelResponse, error)
	DeleteFuel(ctx context.Context, in *DeleteFuelRequest, opts ...grpc.CallOption) (*Empty, error)
	GetFuelByChoice(ctx context.Context, in *GetFuelsByChoiceRequest, opts ...grpc.CallOption) (*GetFuelsByChoiceResponse, error)
	GetFuels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetFuelsResponse, error)
	// fuel_history
	CreateFuelHistory(ctx context.Context, in *CreateFuelHistoryRequest, opts ...grpc.CallOption) (*FuelHistoryResponse, error)
	GetFuelHistoriesByID(ctx context.Context, in *GetFuelHistoriesByIdRequest, opts ...grpc.CallOption) (*GetFuelHistoriesByIdResponse, error)
	GetFuelHistoriesByChoice(ctx context.Context, in *GetFuelHistoriesByChoiceRequest, opts ...grpc.CallOption) (*GetFuelHistoriesByChoiceResponse, error)
	GetFuelHistoriesByDate(ctx context.Context, in *GetFuelHistoriesByDateRequest, opts ...grpc.CallOption) (*GetFuelHistoriesByDateResponse, error)
	GetFuelHistories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetFuelHistoriesResponse, error)
}

type fuelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFuelServiceClient(cc grpc.ClientConnInterface) FuelServiceClient {
	return &fuelServiceClient{cc}
}

func (c *fuelServiceClient) CreateFuel(ctx context.Context, in *CreateFuelRequest, opts ...grpc.CallOption) (*FuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FuelResponse)
	err := c.cc.Invoke(ctx, FuelService_CreateFuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetFuel(ctx context.Context, in *GetFuelRequest, opts ...grpc.CallOption) (*FuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FuelResponse)
	err := c.cc.Invoke(ctx, FuelService_GetFuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) UpdateFuel(ctx context.Context, in *UpdateFuelRequest, opts ...grpc.CallOption) (*FuelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FuelResponse)
	err := c.cc.Invoke(ctx, FuelService_UpdateFuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) DeleteFuel(ctx context.Context, in *DeleteFuelRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, FuelService_DeleteFuel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetFuelByChoice(ctx context.Context, in *GetFuelsByChoiceRequest, opts ...grpc.CallOption) (*GetFuelsByChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFuelsByChoiceResponse)
	err := c.cc.Invoke(ctx, FuelService_GetFuelByChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetFuels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetFuelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFuelsResponse)
	err := c.cc.Invoke(ctx, FuelService_GetFuels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) CreateFuelHistory(ctx context.Context, in *CreateFuelHistoryRequest, opts ...grpc.CallOption) (*FuelHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FuelHistoryResponse)
	err := c.cc.Invoke(ctx, FuelService_CreateFuelHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetFuelHistoriesByID(ctx context.Context, in *GetFuelHistoriesByIdRequest, opts ...grpc.CallOption) (*GetFuelHistoriesByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFuelHistoriesByIdResponse)
	err := c.cc.Invoke(ctx, FuelService_GetFuelHistoriesByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetFuelHistoriesByChoice(ctx context.Context, in *GetFuelHistoriesByChoiceRequest, opts ...grpc.CallOption) (*GetFuelHistoriesByChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFuelHistoriesByChoiceResponse)
	err := c.cc.Invoke(ctx, FuelService_GetFuelHistoriesByChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetFuelHistoriesByDate(ctx context.Context, in *GetFuelHistoriesByDateRequest, opts ...grpc.CallOption) (*GetFuelHistoriesByDateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFuelHistoriesByDateResponse)
	err := c.cc.Invoke(ctx, FuelService_GetFuelHistoriesByDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetFuelHistories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetFuelHistoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFuelHistoriesResponse)
	err := c.cc.Invoke(ctx, FuelService_GetFuelHistories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuelServiceServer is the server API for FuelService service.
// All implementations must embed UnimplementedFuelServiceServer
// for forward compatibility
type FuelServiceServer interface {
	// fuel_management
	CreateFuel(context.Context, *CreateFuelRequest) (*FuelResponse, error)
	GetFuel(context.Context, *GetFuelRequest) (*FuelResponse, error)
	UpdateFuel(context.Context, *UpdateFuelRequest) (*FuelResponse, error)
	DeleteFuel(context.Context, *DeleteFuelRequest) (*Empty, error)
	GetFuelByChoice(context.Context, *GetFuelsByChoiceRequest) (*GetFuelsByChoiceResponse, error)
	GetFuels(context.Context, *Empty) (*GetFuelsResponse, error)
	// fuel_history
	CreateFuelHistory(context.Context, *CreateFuelHistoryRequest) (*FuelHistoryResponse, error)
	GetFuelHistoriesByID(context.Context, *GetFuelHistoriesByIdRequest) (*GetFuelHistoriesByIdResponse, error)
	GetFuelHistoriesByChoice(context.Context, *GetFuelHistoriesByChoiceRequest) (*GetFuelHistoriesByChoiceResponse, error)
	GetFuelHistoriesByDate(context.Context, *GetFuelHistoriesByDateRequest) (*GetFuelHistoriesByDateResponse, error)
	GetFuelHistories(context.Context, *Empty) (*GetFuelHistoriesResponse, error)
	mustEmbedUnimplementedFuelServiceServer()
}

// UnimplementedFuelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFuelServiceServer struct {
}

func (UnimplementedFuelServiceServer) CreateFuel(context.Context, *CreateFuelRequest) (*FuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFuel not implemented")
}
func (UnimplementedFuelServiceServer) GetFuel(context.Context, *GetFuelRequest) (*FuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuel not implemented")
}
func (UnimplementedFuelServiceServer) UpdateFuel(context.Context, *UpdateFuelRequest) (*FuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFuel not implemented")
}
func (UnimplementedFuelServiceServer) DeleteFuel(context.Context, *DeleteFuelRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFuel not implemented")
}
func (UnimplementedFuelServiceServer) GetFuelByChoice(context.Context, *GetFuelsByChoiceRequest) (*GetFuelsByChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuelByChoice not implemented")
}
func (UnimplementedFuelServiceServer) GetFuels(context.Context, *Empty) (*GetFuelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuels not implemented")
}
func (UnimplementedFuelServiceServer) CreateFuelHistory(context.Context, *CreateFuelHistoryRequest) (*FuelHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFuelHistory not implemented")
}
func (UnimplementedFuelServiceServer) GetFuelHistoriesByID(context.Context, *GetFuelHistoriesByIdRequest) (*GetFuelHistoriesByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuelHistoriesByID not implemented")
}
func (UnimplementedFuelServiceServer) GetFuelHistoriesByChoice(context.Context, *GetFuelHistoriesByChoiceRequest) (*GetFuelHistoriesByChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuelHistoriesByChoice not implemented")
}
func (UnimplementedFuelServiceServer) GetFuelHistoriesByDate(context.Context, *GetFuelHistoriesByDateRequest) (*GetFuelHistoriesByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuelHistoriesByDate not implemented")
}
func (UnimplementedFuelServiceServer) GetFuelHistories(context.Context, *Empty) (*GetFuelHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuelHistories not implemented")
}
func (UnimplementedFuelServiceServer) mustEmbedUnimplementedFuelServiceServer() {}

// UnsafeFuelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuelServiceServer will
// result in compilation errors.
type UnsafeFuelServiceServer interface {
	mustEmbedUnimplementedFuelServiceServer()
}

func RegisterFuelServiceServer(s grpc.ServiceRegistrar, srv FuelServiceServer) {
	s.RegisterService(&FuelService_ServiceDesc, srv)
}

func _FuelService_CreateFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).CreateFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_CreateFuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).CreateFuel(ctx, req.(*CreateFuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetFuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetFuel(ctx, req.(*GetFuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_UpdateFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).UpdateFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_UpdateFuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).UpdateFuel(ctx, req.(*UpdateFuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_DeleteFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).DeleteFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_DeleteFuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).DeleteFuel(ctx, req.(*DeleteFuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetFuelByChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFuelsByChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetFuelByChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetFuelByChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetFuelByChoice(ctx, req.(*GetFuelsByChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetFuels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetFuels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetFuels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetFuels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_CreateFuelHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFuelHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).CreateFuelHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_CreateFuelHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).CreateFuelHistory(ctx, req.(*CreateFuelHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetFuelHistoriesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFuelHistoriesByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetFuelHistoriesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetFuelHistoriesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetFuelHistoriesByID(ctx, req.(*GetFuelHistoriesByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetFuelHistoriesByChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFuelHistoriesByChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetFuelHistoriesByChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetFuelHistoriesByChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetFuelHistoriesByChoice(ctx, req.(*GetFuelHistoriesByChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetFuelHistoriesByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFuelHistoriesByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetFuelHistoriesByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetFuelHistoriesByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetFuelHistoriesByDate(ctx, req.(*GetFuelHistoriesByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetFuelHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetFuelHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuelService_GetFuelHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetFuelHistories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FuelService_ServiceDesc is the grpc.ServiceDesc for FuelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FuelService",
	HandlerType: (*FuelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFuel",
			Handler:    _FuelService_CreateFuel_Handler,
		},
		{
			MethodName: "GetFuel",
			Handler:    _FuelService_GetFuel_Handler,
		},
		{
			MethodName: "UpdateFuel",
			Handler:    _FuelService_UpdateFuel_Handler,
		},
		{
			MethodName: "DeleteFuel",
			Handler:    _FuelService_DeleteFuel_Handler,
		},
		{
			MethodName: "GetFuelByChoice",
			Handler:    _FuelService_GetFuelByChoice_Handler,
		},
		{
			MethodName: "GetFuels",
			Handler:    _FuelService_GetFuels_Handler,
		},
		{
			MethodName: "CreateFuelHistory",
			Handler:    _FuelService_CreateFuelHistory_Handler,
		},
		{
			MethodName: "GetFuelHistoriesByID",
			Handler:    _FuelService_GetFuelHistoriesByID_Handler,
		},
		{
			MethodName: "GetFuelHistoriesByChoice",
			Handler:    _FuelService_GetFuelHistoriesByChoice_Handler,
		},
		{
			MethodName: "GetFuelHistoriesByDate",
			Handler:    _FuelService_GetFuelHistoriesByDate_Handler,
		},
		{
			MethodName: "GetFuelHistories",
			Handler:    _FuelService_GetFuelHistories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/fuels_protos/fuel.proto",
}
