// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: protos/ammos.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AmmosService_CreateAmmo_FullMethodName             = "/AmmosService/CreateAmmo"
	AmmosService_GetAmmoByChoice_FullMethodName        = "/AmmosService/GetAmmoByChoice"
	AmmosService_UpdateAmmoById_FullMethodName         = "/AmmosService/UpdateAmmoById"
	AmmosService_DeleteAmmoById_FullMethodName         = "/AmmosService/DeleteAmmoById"
	AmmosService_GetAmmo_FullMethodName                = "/AmmosService/GetAmmo"
	AmmosService_CreateAmmoHistory_FullMethodName      = "/AmmosService/CreateAmmoHistory"
	AmmosService_GetAmmoHistoryByChoice_FullMethodName = "/AmmosService/GetAmmoHistoryByChoice"
	AmmosService_GetAmmoHistoryById_FullMethodName     = "/AmmosService/GetAmmoHistoryById"
	AmmosService_GetAmmoHistoryByDate_FullMethodName   = "/AmmosService/GetAmmoHistoryByDate"
	AmmosService_UpdateAmmoHistoryById_FullMethodName  = "/AmmosService/UpdateAmmoHistoryById"
	AmmosService_DeleteAmmoHistoryById_FullMethodName  = "/AmmosService/DeleteAmmoHistoryById"
	AmmosService_GetAmmoHistory_FullMethodName         = "/AmmosService/GetAmmoHistory"
)

// AmmosServiceClient is the client API for AmmosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmmosServiceClient interface {
	// Ammos
	CreateAmmo(ctx context.Context, in *CreateAmmoRequest, opts ...grpc.CallOption) (*AmmoResponse, error)
	GetAmmoByChoice(ctx context.Context, in *GetAmmoByChoiceRequest, opts ...grpc.CallOption) (*GetAmmoByChoiceResponse, error)
	UpdateAmmoById(ctx context.Context, in *UpdateAmmoByIdRequest, opts ...grpc.CallOption) (*AmmoResponse, error)
	DeleteAmmoById(ctx context.Context, in *DeleteAmmoByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAmmo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAmmoResponse, error)
	// Ammo History
	CreateAmmoHistory(ctx context.Context, in *CreateAmmoHistoryRequest, opts ...grpc.CallOption) (*AmmoHistory, error)
	GetAmmoHistoryByChoice(ctx context.Context, in *GetAmmoHistoryByChoiceRequest, opts ...grpc.CallOption) (*GetAmmoHistoryByChoiceResponse, error)
	GetAmmoHistoryById(ctx context.Context, in *GetAmmoHistoryByIdRequest, opts ...grpc.CallOption) (*AmmoHistory, error)
	GetAmmoHistoryByDate(ctx context.Context, in *GetAmmoHistoryByDateRequest, opts ...grpc.CallOption) (*GetAmmoHistoryByDateResponse, error)
	UpdateAmmoHistoryById(ctx context.Context, in *UpdateAmmoHistoryByIdRequest, opts ...grpc.CallOption) (*AmmoHistory, error)
	DeleteAmmoHistoryById(ctx context.Context, in *DeleteAmmoHistoryByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAmmoHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAmmoHistoryResponse, error)
}

type ammosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAmmosServiceClient(cc grpc.ClientConnInterface) AmmosServiceClient {
	return &ammosServiceClient{cc}
}

func (c *ammosServiceClient) CreateAmmo(ctx context.Context, in *CreateAmmoRequest, opts ...grpc.CallOption) (*AmmoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmmoResponse)
	err := c.cc.Invoke(ctx, AmmosService_CreateAmmo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) GetAmmoByChoice(ctx context.Context, in *GetAmmoByChoiceRequest, opts ...grpc.CallOption) (*GetAmmoByChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAmmoByChoiceResponse)
	err := c.cc.Invoke(ctx, AmmosService_GetAmmoByChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) UpdateAmmoById(ctx context.Context, in *UpdateAmmoByIdRequest, opts ...grpc.CallOption) (*AmmoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmmoResponse)
	err := c.cc.Invoke(ctx, AmmosService_UpdateAmmoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) DeleteAmmoById(ctx context.Context, in *DeleteAmmoByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AmmosService_DeleteAmmoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) GetAmmo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAmmoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAmmoResponse)
	err := c.cc.Invoke(ctx, AmmosService_GetAmmo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) CreateAmmoHistory(ctx context.Context, in *CreateAmmoHistoryRequest, opts ...grpc.CallOption) (*AmmoHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmmoHistory)
	err := c.cc.Invoke(ctx, AmmosService_CreateAmmoHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) GetAmmoHistoryByChoice(ctx context.Context, in *GetAmmoHistoryByChoiceRequest, opts ...grpc.CallOption) (*GetAmmoHistoryByChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAmmoHistoryByChoiceResponse)
	err := c.cc.Invoke(ctx, AmmosService_GetAmmoHistoryByChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) GetAmmoHistoryById(ctx context.Context, in *GetAmmoHistoryByIdRequest, opts ...grpc.CallOption) (*AmmoHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmmoHistory)
	err := c.cc.Invoke(ctx, AmmosService_GetAmmoHistoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) GetAmmoHistoryByDate(ctx context.Context, in *GetAmmoHistoryByDateRequest, opts ...grpc.CallOption) (*GetAmmoHistoryByDateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAmmoHistoryByDateResponse)
	err := c.cc.Invoke(ctx, AmmosService_GetAmmoHistoryByDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) UpdateAmmoHistoryById(ctx context.Context, in *UpdateAmmoHistoryByIdRequest, opts ...grpc.CallOption) (*AmmoHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmmoHistory)
	err := c.cc.Invoke(ctx, AmmosService_UpdateAmmoHistoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) DeleteAmmoHistoryById(ctx context.Context, in *DeleteAmmoHistoryByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AmmosService_DeleteAmmoHistoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ammosServiceClient) GetAmmoHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAmmoHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAmmoHistoryResponse)
	err := c.cc.Invoke(ctx, AmmosService_GetAmmoHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmmosServiceServer is the server API for AmmosService service.
// All implementations must embed UnimplementedAmmosServiceServer
// for forward compatibility
type AmmosServiceServer interface {
	// Ammos
	CreateAmmo(context.Context, *CreateAmmoRequest) (*AmmoResponse, error)
	GetAmmoByChoice(context.Context, *GetAmmoByChoiceRequest) (*GetAmmoByChoiceResponse, error)
	UpdateAmmoById(context.Context, *UpdateAmmoByIdRequest) (*AmmoResponse, error)
	DeleteAmmoById(context.Context, *DeleteAmmoByIdRequest) (*Empty, error)
	GetAmmo(context.Context, *Empty) (*GetAmmoResponse, error)
	// Ammo History
	CreateAmmoHistory(context.Context, *CreateAmmoHistoryRequest) (*AmmoHistory, error)
	GetAmmoHistoryByChoice(context.Context, *GetAmmoHistoryByChoiceRequest) (*GetAmmoHistoryByChoiceResponse, error)
	GetAmmoHistoryById(context.Context, *GetAmmoHistoryByIdRequest) (*AmmoHistory, error)
	GetAmmoHistoryByDate(context.Context, *GetAmmoHistoryByDateRequest) (*GetAmmoHistoryByDateResponse, error)
	UpdateAmmoHistoryById(context.Context, *UpdateAmmoHistoryByIdRequest) (*AmmoHistory, error)
	DeleteAmmoHistoryById(context.Context, *DeleteAmmoHistoryByIdRequest) (*Empty, error)
	GetAmmoHistory(context.Context, *Empty) (*GetAmmoHistoryResponse, error)
	mustEmbedUnimplementedAmmosServiceServer()
}

// UnimplementedAmmosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAmmosServiceServer struct {
}

func (UnimplementedAmmosServiceServer) CreateAmmo(context.Context, *CreateAmmoRequest) (*AmmoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAmmo not implemented")
}
func (UnimplementedAmmosServiceServer) GetAmmoByChoice(context.Context, *GetAmmoByChoiceRequest) (*GetAmmoByChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmmoByChoice not implemented")
}
func (UnimplementedAmmosServiceServer) UpdateAmmoById(context.Context, *UpdateAmmoByIdRequest) (*AmmoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAmmoById not implemented")
}
func (UnimplementedAmmosServiceServer) DeleteAmmoById(context.Context, *DeleteAmmoByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAmmoById not implemented")
}
func (UnimplementedAmmosServiceServer) GetAmmo(context.Context, *Empty) (*GetAmmoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmmo not implemented")
}
func (UnimplementedAmmosServiceServer) CreateAmmoHistory(context.Context, *CreateAmmoHistoryRequest) (*AmmoHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAmmoHistory not implemented")
}
func (UnimplementedAmmosServiceServer) GetAmmoHistoryByChoice(context.Context, *GetAmmoHistoryByChoiceRequest) (*GetAmmoHistoryByChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmmoHistoryByChoice not implemented")
}
func (UnimplementedAmmosServiceServer) GetAmmoHistoryById(context.Context, *GetAmmoHistoryByIdRequest) (*AmmoHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmmoHistoryById not implemented")
}
func (UnimplementedAmmosServiceServer) GetAmmoHistoryByDate(context.Context, *GetAmmoHistoryByDateRequest) (*GetAmmoHistoryByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmmoHistoryByDate not implemented")
}
func (UnimplementedAmmosServiceServer) UpdateAmmoHistoryById(context.Context, *UpdateAmmoHistoryByIdRequest) (*AmmoHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAmmoHistoryById not implemented")
}
func (UnimplementedAmmosServiceServer) DeleteAmmoHistoryById(context.Context, *DeleteAmmoHistoryByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAmmoHistoryById not implemented")
}
func (UnimplementedAmmosServiceServer) GetAmmoHistory(context.Context, *Empty) (*GetAmmoHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmmoHistory not implemented")
}
func (UnimplementedAmmosServiceServer) mustEmbedUnimplementedAmmosServiceServer() {}

// UnsafeAmmosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmmosServiceServer will
// result in compilation errors.
type UnsafeAmmosServiceServer interface {
	mustEmbedUnimplementedAmmosServiceServer()
}

func RegisterAmmosServiceServer(s grpc.ServiceRegistrar, srv AmmosServiceServer) {
	s.RegisterService(&AmmosService_ServiceDesc, srv)
}

func _AmmosService_CreateAmmo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAmmoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).CreateAmmo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_CreateAmmo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).CreateAmmo(ctx, req.(*CreateAmmoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_GetAmmoByChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmmoByChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).GetAmmoByChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_GetAmmoByChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).GetAmmoByChoice(ctx, req.(*GetAmmoByChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_UpdateAmmoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAmmoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).UpdateAmmoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_UpdateAmmoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).UpdateAmmoById(ctx, req.(*UpdateAmmoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_DeleteAmmoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAmmoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).DeleteAmmoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_DeleteAmmoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).DeleteAmmoById(ctx, req.(*DeleteAmmoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_GetAmmo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).GetAmmo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_GetAmmo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).GetAmmo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_CreateAmmoHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAmmoHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).CreateAmmoHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_CreateAmmoHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).CreateAmmoHistory(ctx, req.(*CreateAmmoHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_GetAmmoHistoryByChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmmoHistoryByChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).GetAmmoHistoryByChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_GetAmmoHistoryByChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).GetAmmoHistoryByChoice(ctx, req.(*GetAmmoHistoryByChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_GetAmmoHistoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmmoHistoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).GetAmmoHistoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_GetAmmoHistoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).GetAmmoHistoryById(ctx, req.(*GetAmmoHistoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_GetAmmoHistoryByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmmoHistoryByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).GetAmmoHistoryByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_GetAmmoHistoryByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).GetAmmoHistoryByDate(ctx, req.(*GetAmmoHistoryByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_UpdateAmmoHistoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAmmoHistoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).UpdateAmmoHistoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_UpdateAmmoHistoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).UpdateAmmoHistoryById(ctx, req.(*UpdateAmmoHistoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_DeleteAmmoHistoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAmmoHistoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).DeleteAmmoHistoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_DeleteAmmoHistoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).DeleteAmmoHistoryById(ctx, req.(*DeleteAmmoHistoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmmosService_GetAmmoHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmmosServiceServer).GetAmmoHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmmosService_GetAmmoHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmmosServiceServer).GetAmmoHistory(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AmmosService_ServiceDesc is the grpc.ServiceDesc for AmmosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AmmosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AmmosService",
	HandlerType: (*AmmosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAmmo",
			Handler:    _AmmosService_CreateAmmo_Handler,
		},
		{
			MethodName: "GetAmmoByChoice",
			Handler:    _AmmosService_GetAmmoByChoice_Handler,
		},
		{
			MethodName: "UpdateAmmoById",
			Handler:    _AmmosService_UpdateAmmoById_Handler,
		},
		{
			MethodName: "DeleteAmmoById",
			Handler:    _AmmosService_DeleteAmmoById_Handler,
		},
		{
			MethodName: "GetAmmo",
			Handler:    _AmmosService_GetAmmo_Handler,
		},
		{
			MethodName: "CreateAmmoHistory",
			Handler:    _AmmosService_CreateAmmoHistory_Handler,
		},
		{
			MethodName: "GetAmmoHistoryByChoice",
			Handler:    _AmmosService_GetAmmoHistoryByChoice_Handler,
		},
		{
			MethodName: "GetAmmoHistoryById",
			Handler:    _AmmosService_GetAmmoHistoryById_Handler,
		},
		{
			MethodName: "GetAmmoHistoryByDate",
			Handler:    _AmmosService_GetAmmoHistoryByDate_Handler,
		},
		{
			MethodName: "UpdateAmmoHistoryById",
			Handler:    _AmmosService_UpdateAmmoHistoryById_Handler,
		},
		{
			MethodName: "DeleteAmmoHistoryById",
			Handler:    _AmmosService_DeleteAmmoHistoryById_Handler,
		},
		{
			MethodName: "GetAmmoHistory",
			Handler:    _AmmosService_GetAmmoHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/ammos.proto",
}
