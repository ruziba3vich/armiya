// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: soldiers_sub/soldiers.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AdminService_CreateTrainer_FullMethodName = "/sub_protos.AdminService/CreateTrainer"
	AdminService_DeleteTrainer_FullMethodName = "/sub_protos.AdminService/DeleteTrainer"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	CreateTrainer(ctx context.Context, in *CreateTrainerRequest, opts ...grpc.CallOption) (*Trainer, error)
	DeleteTrainer(ctx context.Context, in *DeleteTrainerRequest, opts ...grpc.CallOption) (*Trainer, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CreateTrainer(ctx context.Context, in *CreateTrainerRequest, opts ...grpc.CallOption) (*Trainer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Trainer)
	err := c.cc.Invoke(ctx, AdminService_CreateTrainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteTrainer(ctx context.Context, in *DeleteTrainerRequest, opts ...grpc.CallOption) (*Trainer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Trainer)
	err := c.cc.Invoke(ctx, AdminService_DeleteTrainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	CreateTrainer(context.Context, *CreateTrainerRequest) (*Trainer, error)
	DeleteTrainer(context.Context, *DeleteTrainerRequest) (*Trainer, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) CreateTrainer(context.Context, *CreateTrainerRequest) (*Trainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrainer not implemented")
}
func (UnimplementedAdminServiceServer) DeleteTrainer(context.Context, *DeleteTrainerRequest) (*Trainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrainer not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_CreateTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateTrainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTrainer(ctx, req.(*CreateTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteTrainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteTrainer(ctx, req.(*DeleteTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sub_protos.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrainer",
			Handler:    _AdminService_CreateTrainer_Handler,
		},
		{
			MethodName: "DeleteTrainer",
			Handler:    _AdminService_DeleteTrainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soldiers_sub/soldiers.proto",
}

const (
	GroupsService_CreateGroup_FullMethodName             = "/sub_protos.GroupsService/CreateGroup"
	GroupsService_DeleteGroup_FullMethodName             = "/sub_protos.GroupsService/DeleteGroup"
	GroupsService_DesignateTeacherToGroup_FullMethodName = "/sub_protos.GroupsService/DesignateTeacherToGroup"
)

// GroupsServiceClient is the client API for GroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsServiceClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Group, error)
	DesignateTeacherToGroup(ctx context.Context, in *DesignateTrainerRequest, opts ...grpc.CallOption) (*DesignateTrainerResponse, error)
}

type groupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsServiceClient(cc grpc.ClientConnInterface) GroupsServiceClient {
	return &groupsServiceClient{cc}
}

func (c *groupsServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupsService_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupsService_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) DesignateTeacherToGroup(ctx context.Context, in *DesignateTrainerRequest, opts ...grpc.CallOption) (*DesignateTrainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DesignateTrainerResponse)
	err := c.cc.Invoke(ctx, GroupsService_DesignateTeacherToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServiceServer is the server API for GroupsService service.
// All implementations must embed UnimplementedGroupsServiceServer
// for forward compatibility
type GroupsServiceServer interface {
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*Group, error)
	DesignateTeacherToGroup(context.Context, *DesignateTrainerRequest) (*DesignateTrainerResponse, error)
	mustEmbedUnimplementedGroupsServiceServer()
}

// UnimplementedGroupsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServiceServer struct {
}

func (UnimplementedGroupsServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupsServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupsServiceServer) DesignateTeacherToGroup(context.Context, *DesignateTrainerRequest) (*DesignateTrainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesignateTeacherToGroup not implemented")
}
func (UnimplementedGroupsServiceServer) mustEmbedUnimplementedGroupsServiceServer() {}

// UnsafeGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServiceServer will
// result in compilation errors.
type UnsafeGroupsServiceServer interface {
	mustEmbedUnimplementedGroupsServiceServer()
}

func RegisterGroupsServiceServer(s grpc.ServiceRegistrar, srv GroupsServiceServer) {
	s.RegisterService(&GroupsService_ServiceDesc, srv)
}

func _GroupsService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_DesignateTeacherToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesignateTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).DesignateTeacherToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupsService_DesignateTeacherToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).DesignateTeacherToGroup(ctx, req.(*DesignateTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupsService_ServiceDesc is the grpc.ServiceDesc for GroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sub_protos.GroupsService",
	HandlerType: (*GroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupsService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupsService_DeleteGroup_Handler,
		},
		{
			MethodName: "DesignateTeacherToGroup",
			Handler:    _GroupsService_DesignateTeacherToGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soldiers_sub/soldiers.proto",
}

const (
	SoldierService_CreateSoldier_FullMethodName          = "/sub_protos.SoldierService/CreateSoldier"
	SoldierService_UpdateSoldier_FullMethodName          = "/sub_protos.SoldierService/UpdateSoldier"
	SoldierService_GetSoldierByField_FullMethodName      = "/sub_protos.SoldierService/GetSoldierByField"
	SoldierService_GetSoldiersByGroupName_FullMethodName = "/sub_protos.SoldierService/GetSoldiersByGroupName"
	SoldierService_GetAllSoldiers_FullMethodName         = "/sub_protos.SoldierService/GetAllSoldiers"
	SoldierService_GetSoldierByAge_FullMethodName        = "/sub_protos.SoldierService/GetSoldierByAge"
	SoldierService_DeleteSoldier_FullMethodName          = "/sub_protos.SoldierService/DeleteSoldier"
)

// SoldierServiceClient is the client API for SoldierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoldierServiceClient interface {
	CreateSoldier(ctx context.Context, in *CreateSoldierRequest, opts ...grpc.CallOption) (*Soldier, error)
	UpdateSoldier(ctx context.Context, in *Soldier, opts ...grpc.CallOption) (*Soldier, error)
	GetSoldierByField(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Soldier, error)
	GetSoldiersByGroupName(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetSoldiersResponse, error)
	GetAllSoldiers(ctx context.Context, in *GetAllSoldiersRequest, opts ...grpc.CallOption) (*GetSoldiersResponse, error)
	GetSoldierByAge(ctx context.Context, in *GetByAgeRequest, opts ...grpc.CallOption) (*GetSoldiersResponse, error)
	DeleteSoldier(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Soldier, error)
}

type soldierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoldierServiceClient(cc grpc.ClientConnInterface) SoldierServiceClient {
	return &soldierServiceClient{cc}
}

func (c *soldierServiceClient) CreateSoldier(ctx context.Context, in *CreateSoldierRequest, opts ...grpc.CallOption) (*Soldier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Soldier)
	err := c.cc.Invoke(ctx, SoldierService_CreateSoldier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) UpdateSoldier(ctx context.Context, in *Soldier, opts ...grpc.CallOption) (*Soldier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Soldier)
	err := c.cc.Invoke(ctx, SoldierService_UpdateSoldier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) GetSoldierByField(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Soldier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Soldier)
	err := c.cc.Invoke(ctx, SoldierService_GetSoldierByField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) GetSoldiersByGroupName(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetSoldiersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoldiersResponse)
	err := c.cc.Invoke(ctx, SoldierService_GetSoldiersByGroupName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) GetAllSoldiers(ctx context.Context, in *GetAllSoldiersRequest, opts ...grpc.CallOption) (*GetSoldiersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoldiersResponse)
	err := c.cc.Invoke(ctx, SoldierService_GetAllSoldiers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) GetSoldierByAge(ctx context.Context, in *GetByAgeRequest, opts ...grpc.CallOption) (*GetSoldiersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoldiersResponse)
	err := c.cc.Invoke(ctx, SoldierService_GetSoldierByAge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) DeleteSoldier(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Soldier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Soldier)
	err := c.cc.Invoke(ctx, SoldierService_DeleteSoldier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoldierServiceServer is the server API for SoldierService service.
// All implementations must embed UnimplementedSoldierServiceServer
// for forward compatibility
type SoldierServiceServer interface {
	CreateSoldier(context.Context, *CreateSoldierRequest) (*Soldier, error)
	UpdateSoldier(context.Context, *Soldier) (*Soldier, error)
	GetSoldierByField(context.Context, *GetRequest) (*Soldier, error)
	GetSoldiersByGroupName(context.Context, *GetRequest) (*GetSoldiersResponse, error)
	GetAllSoldiers(context.Context, *GetAllSoldiersRequest) (*GetSoldiersResponse, error)
	GetSoldierByAge(context.Context, *GetByAgeRequest) (*GetSoldiersResponse, error)
	DeleteSoldier(context.Context, *DeleteRequest) (*Soldier, error)
	mustEmbedUnimplementedSoldierServiceServer()
}

// UnimplementedSoldierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoldierServiceServer struct {
}

func (UnimplementedSoldierServiceServer) CreateSoldier(context.Context, *CreateSoldierRequest) (*Soldier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSoldier not implemented")
}
func (UnimplementedSoldierServiceServer) UpdateSoldier(context.Context, *Soldier) (*Soldier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSoldier not implemented")
}
func (UnimplementedSoldierServiceServer) GetSoldierByField(context.Context, *GetRequest) (*Soldier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldierByField not implemented")
}
func (UnimplementedSoldierServiceServer) GetSoldiersByGroupName(context.Context, *GetRequest) (*GetSoldiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldiersByGroupName not implemented")
}
func (UnimplementedSoldierServiceServer) GetAllSoldiers(context.Context, *GetAllSoldiersRequest) (*GetSoldiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSoldiers not implemented")
}
func (UnimplementedSoldierServiceServer) GetSoldierByAge(context.Context, *GetByAgeRequest) (*GetSoldiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldierByAge not implemented")
}
func (UnimplementedSoldierServiceServer) DeleteSoldier(context.Context, *DeleteRequest) (*Soldier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSoldier not implemented")
}
func (UnimplementedSoldierServiceServer) mustEmbedUnimplementedSoldierServiceServer() {}

// UnsafeSoldierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoldierServiceServer will
// result in compilation errors.
type UnsafeSoldierServiceServer interface {
	mustEmbedUnimplementedSoldierServiceServer()
}

func RegisterSoldierServiceServer(s grpc.ServiceRegistrar, srv SoldierServiceServer) {
	s.RegisterService(&SoldierService_ServiceDesc, srv)
}

func _SoldierService_CreateSoldier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSoldierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).CreateSoldier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_CreateSoldier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).CreateSoldier(ctx, req.(*CreateSoldierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_UpdateSoldier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Soldier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).UpdateSoldier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_UpdateSoldier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).UpdateSoldier(ctx, req.(*Soldier))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_GetSoldierByField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).GetSoldierByField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_GetSoldierByField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).GetSoldierByField(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_GetSoldiersByGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).GetSoldiersByGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_GetSoldiersByGroupName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).GetSoldiersByGroupName(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_GetAllSoldiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSoldiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).GetAllSoldiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_GetAllSoldiers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).GetAllSoldiers(ctx, req.(*GetAllSoldiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_GetSoldierByAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).GetSoldierByAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_GetSoldierByAge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).GetSoldierByAge(ctx, req.(*GetByAgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_DeleteSoldier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).DeleteSoldier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_DeleteSoldier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).DeleteSoldier(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoldierService_ServiceDesc is the grpc.ServiceDesc for SoldierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoldierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sub_protos.SoldierService",
	HandlerType: (*SoldierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSoldier",
			Handler:    _SoldierService_CreateSoldier_Handler,
		},
		{
			MethodName: "UpdateSoldier",
			Handler:    _SoldierService_UpdateSoldier_Handler,
		},
		{
			MethodName: "GetSoldierByField",
			Handler:    _SoldierService_GetSoldierByField_Handler,
		},
		{
			MethodName: "GetSoldiersByGroupName",
			Handler:    _SoldierService_GetSoldiersByGroupName_Handler,
		},
		{
			MethodName: "GetAllSoldiers",
			Handler:    _SoldierService_GetAllSoldiers_Handler,
		},
		{
			MethodName: "GetSoldierByAge",
			Handler:    _SoldierService_GetSoldierByAge_Handler,
		},
		{
			MethodName: "DeleteSoldier",
			Handler:    _SoldierService_DeleteSoldier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soldiers_sub/soldiers.proto",
}

const (
	AttendanecService_CreateAttendance_FullMethodName            = "/sub_protos.AttendanecService/CreateAttendance"
	AttendanecService_AddAmmosToSoldier_FullMethodName           = "/sub_protos.AttendanecService/AddAmmosToSoldier"
	AttendanecService_GetAttendanceByDate_FullMethodName         = "/sub_protos.AttendanecService/GetAttendanceByDate"
	AttendanecService_GetAllAttendanceBySoldierId_FullMethodName = "/sub_protos.AttendanecService/GetAllAttendanceBySoldierId"
	AttendanecService_GetSoldierAttendanceByDate_FullMethodName  = "/sub_protos.AttendanecService/GetSoldierAttendanceByDate"
	AttendanecService_UpdateAttendanceBySoldierId_FullMethodName = "/sub_protos.AttendanecService/UpdateAttendanceBySoldierId"
	AttendanecService_DeleteAttendance_FullMethodName            = "/sub_protos.AttendanecService/DeleteAttendance"
)

// AttendanecServiceClient is the client API for AttendanecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendanecServiceClient interface {
	CreateAttendance(ctx context.Context, in *CreateAttendanceRequest, opts ...grpc.CallOption) (*Attendance, error)
	AddAmmosToSoldier(ctx context.Context, in *AddAmmosRequest, opts ...grpc.CallOption) (*Attendance, error)
	GetAttendanceByDate(ctx context.Context, in *GetAttendanceByDateRequest, opts ...grpc.CallOption) (*GetAttendanceResponse, error)
	GetAllAttendanceBySoldierId(ctx context.Context, in *GetAttendanceByDateRequest, opts ...grpc.CallOption) (*GetAttendanceResponse, error)
	GetSoldierAttendanceByDate(ctx context.Context, in *GetSoldierAttendanceByDateRequest, opts ...grpc.CallOption) (*GetAttendanceResponse, error)
	UpdateAttendanceBySoldierId(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Attendance, error)
	DeleteAttendance(ctx context.Context, in *DeleteAttendanceRequest, opts ...grpc.CallOption) (*Attendance, error)
}

type attendanecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanecServiceClient(cc grpc.ClientConnInterface) AttendanecServiceClient {
	return &attendanecServiceClient{cc}
}

func (c *attendanecServiceClient) CreateAttendance(ctx context.Context, in *CreateAttendanceRequest, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendanecService_CreateAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanecServiceClient) AddAmmosToSoldier(ctx context.Context, in *AddAmmosRequest, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendanecService_AddAmmosToSoldier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanecServiceClient) GetAttendanceByDate(ctx context.Context, in *GetAttendanceByDateRequest, opts ...grpc.CallOption) (*GetAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttendanceResponse)
	err := c.cc.Invoke(ctx, AttendanecService_GetAttendanceByDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanecServiceClient) GetAllAttendanceBySoldierId(ctx context.Context, in *GetAttendanceByDateRequest, opts ...grpc.CallOption) (*GetAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttendanceResponse)
	err := c.cc.Invoke(ctx, AttendanecService_GetAllAttendanceBySoldierId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanecServiceClient) GetSoldierAttendanceByDate(ctx context.Context, in *GetSoldierAttendanceByDateRequest, opts ...grpc.CallOption) (*GetAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttendanceResponse)
	err := c.cc.Invoke(ctx, AttendanecService_GetSoldierAttendanceByDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanecServiceClient) UpdateAttendanceBySoldierId(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendanecService_UpdateAttendanceBySoldierId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanecServiceClient) DeleteAttendance(ctx context.Context, in *DeleteAttendanceRequest, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendanecService_DeleteAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanecServiceServer is the server API for AttendanecService service.
// All implementations must embed UnimplementedAttendanecServiceServer
// for forward compatibility
type AttendanecServiceServer interface {
	CreateAttendance(context.Context, *CreateAttendanceRequest) (*Attendance, error)
	AddAmmosToSoldier(context.Context, *AddAmmosRequest) (*Attendance, error)
	GetAttendanceByDate(context.Context, *GetAttendanceByDateRequest) (*GetAttendanceResponse, error)
	GetAllAttendanceBySoldierId(context.Context, *GetAttendanceByDateRequest) (*GetAttendanceResponse, error)
	GetSoldierAttendanceByDate(context.Context, *GetSoldierAttendanceByDateRequest) (*GetAttendanceResponse, error)
	UpdateAttendanceBySoldierId(context.Context, *UpdateRequest) (*Attendance, error)
	DeleteAttendance(context.Context, *DeleteAttendanceRequest) (*Attendance, error)
	mustEmbedUnimplementedAttendanecServiceServer()
}

// UnimplementedAttendanecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttendanecServiceServer struct {
}

func (UnimplementedAttendanecServiceServer) CreateAttendance(context.Context, *CreateAttendanceRequest) (*Attendance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttendance not implemented")
}
func (UnimplementedAttendanecServiceServer) AddAmmosToSoldier(context.Context, *AddAmmosRequest) (*Attendance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAmmosToSoldier not implemented")
}
func (UnimplementedAttendanecServiceServer) GetAttendanceByDate(context.Context, *GetAttendanceByDateRequest) (*GetAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceByDate not implemented")
}
func (UnimplementedAttendanecServiceServer) GetAllAttendanceBySoldierId(context.Context, *GetAttendanceByDateRequest) (*GetAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAttendanceBySoldierId not implemented")
}
func (UnimplementedAttendanecServiceServer) GetSoldierAttendanceByDate(context.Context, *GetSoldierAttendanceByDateRequest) (*GetAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldierAttendanceByDate not implemented")
}
func (UnimplementedAttendanecServiceServer) UpdateAttendanceBySoldierId(context.Context, *UpdateRequest) (*Attendance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttendanceBySoldierId not implemented")
}
func (UnimplementedAttendanecServiceServer) DeleteAttendance(context.Context, *DeleteAttendanceRequest) (*Attendance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttendance not implemented")
}
func (UnimplementedAttendanecServiceServer) mustEmbedUnimplementedAttendanecServiceServer() {}

// UnsafeAttendanecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanecServiceServer will
// result in compilation errors.
type UnsafeAttendanecServiceServer interface {
	mustEmbedUnimplementedAttendanecServiceServer()
}

func RegisterAttendanecServiceServer(s grpc.ServiceRegistrar, srv AttendanecServiceServer) {
	s.RegisterService(&AttendanecService_ServiceDesc, srv)
}

func _AttendanecService_CreateAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanecServiceServer).CreateAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanecService_CreateAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanecServiceServer).CreateAttendance(ctx, req.(*CreateAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanecService_AddAmmosToSoldier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAmmosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanecServiceServer).AddAmmosToSoldier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanecService_AddAmmosToSoldier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanecServiceServer).AddAmmosToSoldier(ctx, req.(*AddAmmosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanecService_GetAttendanceByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanecServiceServer).GetAttendanceByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanecService_GetAttendanceByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanecServiceServer).GetAttendanceByDate(ctx, req.(*GetAttendanceByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanecService_GetAllAttendanceBySoldierId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanecServiceServer).GetAllAttendanceBySoldierId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanecService_GetAllAttendanceBySoldierId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanecServiceServer).GetAllAttendanceBySoldierId(ctx, req.(*GetAttendanceByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanecService_GetSoldierAttendanceByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoldierAttendanceByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanecServiceServer).GetSoldierAttendanceByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanecService_GetSoldierAttendanceByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanecServiceServer).GetSoldierAttendanceByDate(ctx, req.(*GetSoldierAttendanceByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanecService_UpdateAttendanceBySoldierId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanecServiceServer).UpdateAttendanceBySoldierId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanecService_UpdateAttendanceBySoldierId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanecServiceServer).UpdateAttendanceBySoldierId(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanecService_DeleteAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanecServiceServer).DeleteAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanecService_DeleteAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanecServiceServer).DeleteAttendance(ctx, req.(*DeleteAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanecService_ServiceDesc is the grpc.ServiceDesc for AttendanecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sub_protos.AttendanecService",
	HandlerType: (*AttendanecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttendance",
			Handler:    _AttendanecService_CreateAttendance_Handler,
		},
		{
			MethodName: "AddAmmosToSoldier",
			Handler:    _AttendanecService_AddAmmosToSoldier_Handler,
		},
		{
			MethodName: "GetAttendanceByDate",
			Handler:    _AttendanecService_GetAttendanceByDate_Handler,
		},
		{
			MethodName: "GetAllAttendanceBySoldierId",
			Handler:    _AttendanecService_GetAllAttendanceBySoldierId_Handler,
		},
		{
			MethodName: "GetSoldierAttendanceByDate",
			Handler:    _AttendanecService_GetSoldierAttendanceByDate_Handler,
		},
		{
			MethodName: "UpdateAttendanceBySoldierId",
			Handler:    _AttendanecService_UpdateAttendanceBySoldierId_Handler,
		},
		{
			MethodName: "DeleteAttendance",
			Handler:    _AttendanecService_DeleteAttendance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soldiers_sub/soldiers.proto",
}

const (
	TrainingsService_CreateTraining_FullMethodName            = "/sub_protos.TrainingsService/CreateTraining"
	TrainingsService_UpdateTrainingDescription_FullMethodName = "/sub_protos.TrainingsService/UpdateTrainingDescription"
)

// TrainingsServiceClient is the client API for TrainingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingsServiceClient interface {
	CreateTraining(ctx context.Context, in *CreateTrainingRequest, opts ...grpc.CallOption) (*Training, error)
	UpdateTrainingDescription(ctx context.Context, in *UpdateTrainingDescriptionRequest, opts ...grpc.CallOption) (*Training, error)
}

type trainingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingsServiceClient(cc grpc.ClientConnInterface) TrainingsServiceClient {
	return &trainingsServiceClient{cc}
}

func (c *trainingsServiceClient) CreateTraining(ctx context.Context, in *CreateTrainingRequest, opts ...grpc.CallOption) (*Training, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Training)
	err := c.cc.Invoke(ctx, TrainingsService_CreateTraining_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingsServiceClient) UpdateTrainingDescription(ctx context.Context, in *UpdateTrainingDescriptionRequest, opts ...grpc.CallOption) (*Training, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Training)
	err := c.cc.Invoke(ctx, TrainingsService_UpdateTrainingDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingsServiceServer is the server API for TrainingsService service.
// All implementations must embed UnimplementedTrainingsServiceServer
// for forward compatibility
type TrainingsServiceServer interface {
	CreateTraining(context.Context, *CreateTrainingRequest) (*Training, error)
	UpdateTrainingDescription(context.Context, *UpdateTrainingDescriptionRequest) (*Training, error)
	mustEmbedUnimplementedTrainingsServiceServer()
}

// UnimplementedTrainingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainingsServiceServer struct {
}

func (UnimplementedTrainingsServiceServer) CreateTraining(context.Context, *CreateTrainingRequest) (*Training, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTraining not implemented")
}
func (UnimplementedTrainingsServiceServer) UpdateTrainingDescription(context.Context, *UpdateTrainingDescriptionRequest) (*Training, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrainingDescription not implemented")
}
func (UnimplementedTrainingsServiceServer) mustEmbedUnimplementedTrainingsServiceServer() {}

// UnsafeTrainingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingsServiceServer will
// result in compilation errors.
type UnsafeTrainingsServiceServer interface {
	mustEmbedUnimplementedTrainingsServiceServer()
}

func RegisterTrainingsServiceServer(s grpc.ServiceRegistrar, srv TrainingsServiceServer) {
	s.RegisterService(&TrainingsService_ServiceDesc, srv)
}

func _TrainingsService_CreateTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrainingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServiceServer).CreateTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingsService_CreateTraining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServiceServer).CreateTraining(ctx, req.(*CreateTrainingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingsService_UpdateTrainingDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrainingDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServiceServer).UpdateTrainingDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingsService_UpdateTrainingDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServiceServer).UpdateTrainingDescription(ctx, req.(*UpdateTrainingDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingsService_ServiceDesc is the grpc.ServiceDesc for TrainingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sub_protos.TrainingsService",
	HandlerType: (*TrainingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTraining",
			Handler:    _TrainingsService_CreateTraining_Handler,
		},
		{
			MethodName: "UpdateTrainingDescription",
			Handler:    _TrainingsService_UpdateTrainingDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soldiers_sub/soldiers.proto",
}
